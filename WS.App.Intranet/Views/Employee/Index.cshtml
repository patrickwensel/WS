@using WS.App.Intranet.ViewModels.Employee
@using WS.Framework.WSJDEData

@(Html.Kendo().Grid<EmployeeViewModel>()
    .Name("requestSourceGrid")
    .Columns(columns =>
    {
        columns.Bound(p => p.EmployeeNumber);
        columns.Bound(p => p.FirstName);
        columns.Bound(p => p.LastName);
        columns.Bound(p => p.Title);
        columns.Bound(p => p.EmployeeStatusID);
    })
    .Pageable(paging => paging
        .Input(false)
        .Numeric(true)
        .PreviousNext(true)
        .PageSizes(new[] { 10, 25, 50 })
        .Refresh(true))
    .Sortable()
    .Filterable()
    .ClientDetailTemplateId("template")
    .Events(events => events.DataBound("dataBound"))
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Events(events => events.Error("error_handler"))
        .Model(model =>
            {
                model.Id(p => p.ID);
                model.Field(p => p.ID).Editable(false);
            })
        .Read(read => read.Action("EmployeeRead", "Employee"))
    )
)
<br>

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<SecurityViewModel>()
        .Name("grid_#=ID#")
        .Columns(columns =>
            {
                columns.ForeignKey(p => p.ApplicationID, (System.Collections.IEnumerable)ViewData["applicationViewModels"], "ID", "Name")
                    .Title("Applications")
                    .Width(200);
                columns.ForeignKey(p => p.SecurityLevel, (System.Collections.IEnumerable)ViewData["securityLevelViewModels"], "LevelID", "Description")
                       .Title("Security Level")
                       .Width(200)
                       .EditorTemplateName("SecurityLevelID");
                columns.Bound(o => o.Password);
                columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
            })
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .Model(model =>
                {
                    model.Id(p => p.ID);
                })
            .Read(read => read.Action("GetSecurityDataByEmployeeID", "Employee", new { employeeID = "#=ID#" }))
            .Create(update => update.Action("SecurityCreate", "APIAdmin"))
            .Update(update => update.Action("SecurityUpdate", "APIAdmin"))
            .Destroy(update => update.Action("SecurityDestroy", "APIAdmin")))
        .Pageable(paging => paging
            .Input(false)
            .Numeric(true)
            .PreviousNext(true)
            .PageSizes(new[] { 10, 25, 50 })
            .Refresh(true))
        .ToolBar(toolbar => toolbar.Create())
        .Sortable(sortable => sortable
            .AllowUnsort(true)
            .SortMode(GridSortMode.MultipleColumn))
        .ToClientTemplate()
    )
</script>
<script type="text/javascript">
    
    function filterSecurityLevels() {
        return {
            applicationID: $("#ApplicationID").val()
        };
    }
    
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

</script>


